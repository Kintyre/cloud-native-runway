#2:  Setting up & Configuring the Cloud Environment
=================================================== 

In the first blog post in this series I discussed some of the reasons,  thought processes and design considerations that guided the building of our reference application being discussed in this blog series.  In this post I will be getting into the details of the hosting environment.  Remembering back to the first blog I talked a lot about the design decision for making what we build as cloud provider agnostic as possible.  I also mentioned that most of what we do at the moment is based in the AWS ecosystem so this post will be in that context.  

First, a mind switch
^^^^^^^^^^^^^^^^^^^^

When you start talking about cloud native applications you really start getting into a hybrid skillset.  I say that because if you are from a traditional application development skill set you are used to application architecture.  Things like how to design, databases,  how to define the classes and entities in the application,  how to decouple the application through dependency injection etc…  You are probably not used to dealing with network routes because that's what the “infrastructure” guys do.  On the other hand if you are coming at this from more of a Infrastructure perspective you are used to designing networks,  configuring load balancers,  performing penetration testing,  setting up & configuring servers and such but don't really get the whole dependency injection thing the app guys talk about.   A move to cloud computing goes a long way to blurring the lines between these two worlds into a single skill set.  Sure you can spin up an EC2 instance in AWS and move the existing workload off of the server in the datacenter onto the cloud instance and it will feel very much the same as the on-prem world but that's not really what we are talking about here. 

When you consider that this can be a big subject requiring a fair amount of architectural skill combined with the actual needs of our reference app being kind of small it would be a short blog post with minimal value if I just described what the app needs.  In order to give cloud setup and configuration its due within the context of a relatively simple use case I decided to break this down into a series of steps with general thought provoking questions one might need to consider as you work through the setup and configuration of a cloud environment. At the end I will talk about how I would set up the reference app if it were going into production.

Account Creation
^^^^^^^^^^^^^^^^

Before you can configure an account you need one first and there are some considerations to think about at account creation.  The most relevant consideration here is if you are setting up a single, stand alone AWS account or if you need to introduce a new AWS Organizational structure or participate in an existing one.   The benefits for a single stand alone account is relative simplicity where the benefits of an AWS Organization are inheritance, user management and tools for making multi-account management easier.   Some questions you might ask yourself in the context of this question are:

* How am I going to manage a development environment vs a production environment?  Do I want to manage them as separate stacks within a single account or are they managed as completely separate AWS accounts?

* Is there already an AWS Organizational structure and does my application need access to what's in it?  What is the best way to manage that access?

* If I end up deciding that multiple accounts make the most sense how will I manage things like billing and governance?  

* What is the best way to manage user access to the account?  If a person leaves the company and we have 10 AWS accounts, what is the best setup for handling this?  If I want to rotate the keys on my service accounts how do I want to manage that, almost certainly not from each sub-account?

* Policies about things like password rules and such,  do I want my account to inherit them from a root account or do I have to manage them at the account level?

* Answers to these and other questions will help you decide if you want to manage the account as part of an AWS Organization or if a stand alone account is more appropriate.  For more information on AWS Organizations and account setup the online documentation does a great job giving a more comprehensive picture but this is the stage where you want to think this through.   

* https://aws.amazon.com/organizations/

Account Setup / Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Once you have made the decision on how to create your AWS account now it comes to the point of configuring it.  Here again you have a few things to consider before you can really sit down and do the work of configuring the account.

Working in the account
^^^^^^^^^^^^^^^^^^^^^^

Do I want to go into the account and manually configure it using the AWS management console?  If you end up with a development account and a production account the answer should almost certainly be no but for a small workload maybe.

Do I want a more automated approach using something like a script that leverages the AWS CLI?  Or better yet do I want to commit to the whole Automation/Infrastructure as Code idea and use a more robust automation solution like Terraform?  Again,  it depends.

Networking and Access
^^^^^^^^^^^^^^^^^^^^^

How do I best design the networking and access for the environment to be secure,  scalable and fault tolerant?  As I mentioned above this can be tricky and is a potentially big shift in thinking depending on your background.  Some things to think of in this area are:

* How do I want to secure the network infrastructure?

* Do I want a private subnet that cannot be accessed from the outside world for secure resources like a database?

* If I do use a private subnet then how will I get into it from the outside world?  Bastion host in the public subnet or VPN?  How do I secure the bastion host?

* Will resources in the private subnet need access to the outside world for things like patches and such,  if so how will I provide it?

* Will I need access to resources in other AWS accounts in the case of an organization with other AWS accounts as discussed above?

* How do I want to provide fault tolerance for the application?  Does the application need to deploy to multiple regions and availability zones?

* Is the global distribution of my user base such that I need to consider a CDN to address latency issues that may exist?

Governance, Compliance and Logging
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When it comes to understanding what is going on in your account you are going to need to understand and use the monitoring and logging tools for things like.

* Configuration changes

* Who made the changes and when

* Performance monitoring

* Application event logging

CloudTrail, Config and CloudWatch are the services at the core of monitoring your environment and applications running in it.  CloudTrail and Config are less clear than CloudWatch so I'll talk about them first.

AWS Config is a service that allows you to see things like an AWS resource inventory.  It also  enables you to see how a resource is configured and how that configuration has changed over time.

AWS CloudTrail is very similar but it provides log information about the API calls that are making changes to the configurations in your environment.  This will give you information like the API call making the change,  the source IP address of the API call,  when the change was made,  etc…   It will capture events coming from both the AWS Console and the AWS CLI since they both end up using the API.

For example:  A user changing the configuration of an EC2 instance running in your environment using the AWS CLI from their home machine.  You would see in AWS Config the new configuration state for the instance as well as the original configuration state.  In AWS CloudTrail you would see an API call coming from that user's IP address that resulted in the config change being made.

* https://aws.amazon.com/cloudtrail/

* https://aws.amazon.com/config/

CloudWatch is different and less of a change management tool and more of an application logging and performance monitoring tool.  This is where you would see application logs and performance metrics about the AWS Services used in your account.

* https://aws.amazon.com/cloudwatch/

Now that I have discussed some of the broader AWS account setup considerations, what about the reference application setup?   As I mentioned above,  the account setup needs of the reference app are pretty modest outside of the context of a full blown implementation of a business process.   You could take this in one of 2 directions depending on your intentions.  You could setup the account with a minimum set of requirements just for getting the reference application up and running so that you could follow along with the blog or you could setup the account as if you were going to do a production deployment of this.  The setup section will take you through the steps needed to go in either direction.
